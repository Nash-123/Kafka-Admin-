docker exec -it kafkamultinode_kafka1_1 bash

kafka-topics.sh --create --topic test1 --bootstrap-server kafka1:9092 --replication-factor 2 --partitions 6

# List only single topic named "test1" (prints only topic name)
kafka-topics.sh --list --bootstrap-server kafka1:9092 --topic test1

# List all topics (prints only topic names)
kafka-topics.sh --list --bootstrap-server kafka1:9092
 
# Describe only single topic named "test1" (prints details about the topic)
kafka-topics.sh --describe --bootstrap-server kafka1:9092 --topic test1
 
# Describe all topics (prints details about the topics)
kafka-topics.sh --describe --bootstrap-server kafka1:9092

# List info for topics which have under replicated count
kafka-topics.sh --describe --bootstrap-server kafka1:9092 --under-replicated-partitions

# on kafka broker 3 -> kafka3
# bring down one broker
exit
docker stop kafkamultinode_kafka3_1

docker exec -it kafkamultinode_kafka1_1 bash
# on the kafka1 terminal
kafka-topics.sh --describe --bootstrap-server kafka1:9092 --under-replicated-partitions

kafka-topics.sh --describe --bootstrap-server kafka1:9092 --topic first_topic   
kafka-topics.sh --describe --bootstrap-server kafka1:9092 --topic first_topic --under-replicated-partitions
# list only topics where some partitions are not available

# List info for topics whose leader for a partition is not available
kafka-topics.sh --describe --bootstrap-server kafka1:9092 --unavailable-partitions
# leader=none

# Create topic with specific number of partitions and/or replicas
# If number of replication factor higher than the brokers, you will get error. " Replication factor: 3 larger than available brokers: 2."
kafka-topics.sh --create --bootstrap-server kafka1:9092 --topic test3 --replication-factor 3 --partitions 3

exit
# start the broker 3 -> kafka3
docker start kafkamultinode_kafka3_1
docker exec -it kafkamultinode_kafka1_1 bash

# Create topic with manual replica assignment 
# Run on the putty inside the kafka container
kafka-topics.sh --create --bootstrap-server kafka1:9092 --topic test4 --replica-assignment 1:2,3:2,3:1
# Partition0: Brokers: 1:2	-> Leader 1
# Partition1: Brokers: 3:2  -> Leader 3
# Partition2: Brokers: 3:1  -> Leader 3

kafka-topics.sh --describe --bootstrap-server kafka1:9092 --topic test4
  

# Create topic with configuration override
kafka-topics.sh --create --bootstrap-server kafka1:9092 --topic test5 --config min.insync.replicas=2

kafka-topics.sh --describe --bootstrap-server kafka1:9092 --topic test5

kafka-topics.sh --describe --bootstrap-server kafka1:9092 --topic test1
# Increase number of partitions for topic
kafka-topics.sh --alter --bootstrap-server kafka1:9092 --topic test1 --partitions 8
  
kafka-topics.sh --describe --bootstrap-server kafka1:9092 --topic test1

# Increase number of partitions with specific replica assignment
kafka-topics.sh --alter --bootstrap-server kafka1:9092 --topic test4 --replica-assignment 1:2,3:2,3:1,2:1 --partitions 4

kafka-topics.sh --describe --bootstrap-server kafka1:9092 --topic test4

ls /bitnami/kafka/data/
# Delete topic named test5
kafka-topics.sh --delete --bootstrap-server kafka1:9092 --topic test5
ls /bitnami/kafka/data/

# Identify if the topic test5 is not listed
kafka-topics.sh --list --bootstrap-server kafka1:9092 

# Add new option or change exsiting option
kafka-configs.sh --alter --bootstrap-server kafka1:9092 --entity-name test1 --entity-type topics --add-config cleanup.policy=compact
 
kafka-topics.sh --describe --bootstrap-server kafka1:9092 --topic test1 
# Remove exsiting option
kafka-configs.sh --alter --bootstrap-server kafka1:9092 --entity-name test1 --entity-type topics --delete-config cleanup.policy

# observe the configs will be blank again
kafka-topics.sh --describe --bootstrap-server kafka1:9092 --topic test1 